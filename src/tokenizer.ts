import moo from 'moo';

const lexer = moo.compile({
  WS: /[ \t]+/,
  comment: /\/\/.+$|\/\*(?:.|\s)*?\*\//,
  pragma: /^\s*\#.+$/,
  identifier: {
    match: /[a-zA-Z_](?:[a-zA-Z_0-9]*)/,
    keywords: {
      const: 'const',
      break: 'break',
      continue: 'continue',
      do: 'do',
      else: 'else',
      for: 'for',
      if: 'if',
      discard: 'discard',
      return: 'return',
      switch: 'switch',
      case: 'case',
      default: 'default',
      centroid: 'centroid',
      in: 'in',
      out: 'out',
      inout: 'inout',
      uniform: 'uniform',
      struct: 'struct',
      void: 'void',
      while: 'while',
      interpolationQualifier: ['flat', 'smooth'],
      layout: 'layout',
      precision: 'precision',
      precisionQualifier: ['lowp', 'mediump', 'highp'],
      invariant: 'invariant',
      boolConstant: ['true', 'false'],
      type: ['bool', 'float', 'int', 'uint',
        'bvec2', 'bvec3', 'bvec4', 'ivec2', 'ivec3', 'ivec4',
        'uvec2', 'uvec3', 'uvec4', 'vec2', 'vec3', 'vec4',
        'mat2', 'mat3', 'mat4', 'mat2x2', 'mat2x3', 'mat2x4',
        'mat3x2', 'mat3x3', 'mat3x4', 'mat4x2', 'mat4x3', 'mat4x4',
        'sampler2D', 'sampler3D', 'samplerCube', 'sampler2DShadow',
        'samplerCubeShadow', 'sampler2DArray', 'sampler2DArrayShadow',
        'isampler2D', 'isampler3D', 'isamplerCube', 'isampler2DArray',
        'usampler2D', 'usampler3D', 'usamplerCube', 'usampler2DArray',
      ],
    },
  },
  floatConstant: /\-?[0-9]+\.[0-9]+/,
  uintConstant: /[0-9]+/,
  intConstant: /\-[0-9]+/,
  leftOp: '<<',
  rightOp: '>>',
  incOp: '++',
  decOp: '--',
  leOp: '<=',
  geOp: '>=',
  eqOp: '==',
  neOp: '!=',
  andOp: '&&',
  orOp: '||',
  xorOp: '^',
  mulAssign: '*=',
  divAssign: '/=',
  addAssign: '+=',
  modAssign: '%=',
  leftAssign: '<<=',
  rightAssign: '>>=',
  andAssign: '&=',
  xorAssign: '^=',
  orAssign: '|=',
  subAssign: '-=',
  leftParen: '(',
  rightParen: ')',
  leftBracket: '[',
  rightBracket: ']',
  leftBrace: '{',
  rightBrace: '}',
  comma: ',',
  colon: ':',
  equal: '=',
  semicolon: ';',
  bang: '!',
  dash: '-',
  tilde: '~',
  plus: '+',
  star: '*',
  slash: '/',
  percent: '%',
  leftAngle: '<',
  rightAngle: '>',
  verticalBar: '|',
  caret: '^',
  ampersand: '&',
  question: '?',
  period: '.',
  NL: { match: /\n/, lineBreaks: true },
});

export default function tokenize(code: string) {
  lexer.reset(code);
  return lexer;
}
